Cheerio = Fast, flexible, and lean implementation of core jQuery designed specifically for the server. (Used for web scraping) 
express = server framework
nodemon = live reload/restart
axios = Promise based HTTP client for the browser. (makes life easier with http requests)

---
    $('.fc-item__title', html).each(function () {
            const title = $(this).text();
            const url = $(this).find('a').attr('href');
---
// When using arrow functions, 'this' cannot be used as arrow functions don't create their 
own execution context but instead inherit from the parent
https://www.codementor.io/@dariogarciamoya/understanding-this-in-javascript-with-arrow-functions-gcpjwfyuc


---
// const url = 'https://www.theguardian.com/uk';

// $('.fc-item__title').each((index, element) => {
//     const title = $(element).text();
//     const url = $(element).find('a').attr('href');

//     console.log(element.children)

//     articles.push({
//         index,
//         title,
//         url,
//     });
// });


---
getInStock:
WebDevSimplied had a good video on JS DOM

Element vs Nodes.
Element: Only HTML types
Node: "Text", <!-- comments -->, <span></span>
-
Element: Method Properties, all of nodes properties++
Node: basic methods/Properties

best to use element

HTMLCollection vs NodeList:
HTMLCollection: Only HTML elements 
NodeList: Everything ("Text", <!-- comments -->, <span></span>)
-
HTML has no array methods
NodeList has array methods (forEach)
-
HTML has live updates, difficult to debug
Thus for this reason, best to use querySelectorAll instead of getElementsByClassName, as this is suspectable to live updates




---
async function getItemDetails(items) { // get size and if in stock, remove those not in stock
    Promise.all(items.map((item) => {
        return axios.get(item.url).then((response) => {
            const html = response.data;
            const $ = cheerio.load(html);
            // get stock
            const inStock = $('meta')[28].attribs.content;
            if (inStock === 'OUT OF STOCK') throw new Error(`'${item.itemName}' Out of stock`);
            // get sizes
            const objectStr = $('script')[3].children[0].data;
            const regex = /name:("\w{1,3}")/g;
            const sizes = [...objectStr.matchAll(regex)].map(item => item[1].substring(1, item[1].length - 1));

            return { ...item, sizes, inStock };
        }).catch(err => console.log(err.name, 'in getItemDetails Axios.get: ', err.message));
    })).then((inStockItems) => {
        if (inStockItems == undefined || inStockItems.length === 0) throw new Error('Promise.all returned 0');
        return inStockItems;
    }).catch(err => console.log(err.name, 'in getItemDetails Promise.all: ', err.message));
}
---
https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/routes
index.js -> delegates to Router dir (just the endpoint)
Router -> Controller
Controller calls service for business logic
"Routes" to forward the supported requests (and any information encoded in request URLs) to the appropriate controller functions.
Controller functions to get the requested data from the models, create an HTML page displaying the data, and return it to the user to view in the browser.
Views (templates) used by the controllers to render the data.
 - 
 Helper == Utils
 - Using middlewares for stuff like checking if user is already authenticated etc
 https://www.youtube.com/watch?v=8Ip0pcwbWYM&list=PL55RiY5tL51q4D-B63KBnygU6opNPFk_q&index=13 => watch this series!
 https://medium.com/@ipenywis/what-is-the-mvc-creating-a-node-js-express-mvc-application-da10625a4eda
 https://github.com/ipenywis/simple-express-server
 https://www.udemy.com/course/nodejs-the-complete-guide/?couponCode=D_1121

---
https://stackoverflow.com/questions/46677752/the-difference-between-requirex-and-import-x
---